;[
; $Id$
;
; This file is part of ebf-compiler (example file)
; utf.bf converts iso-8859-1-input and outputs valid UTF-8 version
;
; @encoding UTF-8
; @package EBF http://sylwester.no/ebf/
; @author Pål Wester <pal.wester.bf@sylwester.no>
;
; ebf-compiler is free software: you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation, either version 3 of the License, or
; (at your option) any later version.
;
; ebf-compiler is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; ]

:tmp
:input
:zero or adding aide
:compare

;; read reads a byte from stdin
;; to support all eof types in brainfuck
;; we set it initialy to zero and afterwards
;; check if adding 1 will result in a zero and
;; then leave it at zero.
{read
  $zero+
  if read $input(-),+ is 0
  [-$zero-]@input
  if $zero
  [-$compare]
}

;; divmod performs divide and modulus at the same time
;; needs 3 additional cleared cells to work
;; @argument ^0 divident
;; @argument ^1 divisor
;; @return ^1   divisor-modulus
;; @return ^2   modulus in  ^2
;; @return ^3   quotient in ^3
{divmod
    [->-[>+>>]>[+[-<+>]>+>>]<<<<<]*-3
}

{set_127
    sets all bits in compare as 7 bit ascii
    $compare ~"~"<+       store 127 in compare
}

{substract
    substracts input from ccompare without reducing compare below zero
    $input($tmp+$compare[-$zero]$input[$zero]$input-)

}

{clear (-)}

$input &read
while $input (
   &set_127 set 127 in compare
   ;i=x|z=0|c=127
   &substract i from 127

   $zero+	set z to 1
   if $compare is not null
   (
        $compare &clear if compare is not zero its 7 bit us ascii
  	$zero-
	$tmp. &clear
   )
   if $zero flag set
   (
    7+(-$input 8+) multiply 8 by 8 so we have 64 in input
    $tmp &divmod divide tmp with i=64
    $input &clear 11+ 11 in input
    (-
	$zero 11+       increase n with 11 by 11 = 121
    	$compare 18+    increase c with 11 by 18 = 198
    )
    $compare 6-  decrease compare with 6 so we have set the 2 MSB
    . &clear     print first utf byte then clear

    $zero 7+    increase zero by 7 so we have set the LSB
    . &clear    print second utf byte and clear
   )
   $input &read
)



